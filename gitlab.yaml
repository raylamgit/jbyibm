# Pipeline managed stages
stages:
  - Dependencies
  - Build
  - CodeReview
  - Report
  - Package
  - Deploy
    
# Pipeline global variables
variables:
  # Variables to active or disable zUnit/Code Coverage/Code Review and Report features.
  RUN_ZUNIT_TEST: "true"
  RUN_CODE_COVERAGE: "true"
  RUN_IDZ_CODE_REVIEW  : "false"
  GITLAB_REPORT_UPLOAD: "false"
  
  
  # z/OS Working directory
  WORKING_DIR: "/u/rlam/builds/tuto/work/$CI_PIPELINE_ID"

  # z/OS Report directory
  REPORT_FOLDER: "/u/rlam/builds/tuto/report/$CI_PIPELINE_ID"

  # DBB related variables
  DBB_HOME: "/var/dbb"
  DBB_HLQ: "RLAM.GENAPP" 
  DBB_URL: "jdbc:db2://tvt7111.svl.ibm.com:5050/DBC1"
  #DBB_URL: "https://mvpgitlab1.fyre.ibm.com:9443/dbb"


  # Artificatory related variables (password is declared into your GibLab group)
  ARTI_URL: "https://na.artifactory.swg-devops.com/artifactory"
  ARTI_USERNAME: "raymond.lam@ibm.com"
  ARTI_REPO_PATH: "hyc-mvp-team-maven-local/WebDemo "

  # UCD related variables (password is declared into your GibLab group)
  UCD_BUZTOOL_PATH: "/var/ucd/v73/bin/buztool.sh"
  UCD_URL: "https://mvpserver1.fyre.ibm.com:8443"
  UCD_USERNAME: "ray"

  # Code Coverage related variables only if RUN_CODE_COVERAGE: "true" and RUN_ZUNIT_TEST: "true"
  CCC_INSTALL_FOLDER: "/usr/lpp/IBM/debug/headless-code-coverage"
  
  # Report related variables (we use sftp to pull the build log/report from the z/OS)
  # We assume that you have set up ssh key exchange between the distributed system and your z/OS. 
  # The report will be uploaded only when GITLAB_REPORT_UPLOAD="true". In this case
  # you must have configured a GitLab runner shell executor as mentioned in the online tutorial. 
  ZOS_SFTP_HOST: "tvt7111.svl.ibm.com"
  ZOS_SFTP_PORT: "22"
  ZOS_SFTP_USER: "rlam"
  ZOS_TMP: "/tmp/rlam.netstat"

  # Default values for the tutorial
  UCD_APPPLICATION: "RayDemo_App"
  UCD_PROCESS: "Ray_Deploy_App_Bind_CICS_WEB_Proc"
  #UCD_PROCESS: "Ray_Deploy_App_Bind_CICS_WEB_Proc"      # Artifcatory with /var/ucd/v71 path
  #UCD_PROCESS: "Ray_Deploy_App_Bind_CICS_EXT_Proc"      # Artifcatory with /var/ucd/v7  path 
  #UCD_PROCESS: "Ray_Deploy_App_Bind_CICS_UCD_Proc"      # Local UCD  
  UCD_ENV: "Dev"
  UCD_COMPONENT: "IBMDemo"  
  # Zunit 
  #ZUNIT_OPTION: "-cc -cch localhost -ccp 8009 -cco "e='CCPDF,CCSONARQUBE',o=${CI_PROJECT_DIR}""
  #UCD_ENV: "Development"
  #UCD_COMPONENT: "GenAppComponent"  
  ARTI_PASSWORD: "$GROUP_ARTI_PASSWORD"
  ARTI_BUZTOOL: "/var/ucd/v73/zossamples/buztool.properties"
  UCD_PASSWORD: "$GROUP_UCD_PASSWORD"
  DBB_EXTRA_OPTS: "-d "
  DBB_BUILD_TYPE: "-i"
  # DBB_CREDENTIAL_OPTIONS: "-id ray -pw ray"  
  DBB_CREDENTIAL_OPTIONS: "-id RLAM -pf /var/dbb/conf/rlam.txt "


  DBB_DAEMON_OPTS: ""
  JAVA_TLS: "-Dhttps.protocols=TLSv1.2 -Dhttp.protocols=TLSv1.2 -Djdk.tls.client.protocols=TLSv1.2"
  JAVA_SSL: "-Djavax.net.debug=ssl:handshake:verbose"
  #JAVA_LOG4J: " -Dorg.slf4j.simpleLogger -cp /usr/lpp/db2c10/jdbc/classes/db2jcc4.jar:/usr/lpp/db2c10/jdbc/classes/db2jcc_license_cisuz.jar"
  JAVA_LOG4J: " -Dorg.slf4j.simpleLogger " 

  CCC_HOST: "127.0.0.1"
  CCC_PORT: "8009"
  #CCC_OPTS: "e=CCPDF" 

  GIT_SSL_NO_VERIFY: "true"
  CI_DEBUG_TRACE: "false"

  # xml toolkits path 
  XSLTPATH: "/usr/lpp/ixm/IBM/xslt4c-1_12" 
  XMLPATH:  "/usr/lpp/ixm/IBM/xml4c-5_8"
  
# This stage will checkout the GitLab dbb project for DBB Build
dbb:
  stage: Dependencies
  trigger:
    project: "wazi/dbb"
    branch: main
    strategy: depend

# This stage will checkout the GitLab dbb-zappbuild project for DBB Build
zAppBuild:
  stage: Dependencies
  trigger:
    project: "wazi/dbb-zappbuild"
    branch: main
    strategy: depend

# This stage on the z/OS perform the DBB build with zUnit and Code Coverage (optional)
DBB Build:
  stage: Build
  dependencies: []  
  before_script:
  - |
    # Cleanup build and report folders
    rm -rf $WORKING_DIR
    mkdir -p $WORKING_DIR
    rm -rf $REPORT_FOLDER
    mkdir -p $REPORT_FOLDER
    if [ "$RUN_CODE_COVERAGE" == "true" ] && [ "$RUN_ZUNIT_TEST" == "true" ]
    then
      $CCC_INSTALL_FOLDER/bin/ccstart.sh -port=$CCC_PORT -exportertype=CCPDF > $WORKING_DIR/ccc.log&
      #RLAM
      echo "CC TRUE -> $CCC_INSTALL_FOLDER/bin/ccstart.sh -port=$CCC_PORT -exportertype=CCPDF > $WORKING_DIR/ccc.log&"
    fi
  script:
  - |
    
    java -version
    git --version
    
    rc=0
    if [ "$RUN_CODE_COVERAGE" == "true" ] && [ "$RUN_ZUNIT_TEST" == "true" ]
    then
       DBB_CCC_OPTS="-cc -cch ${CCC_HOST} -ccp ${CCC_PORT} "
    fi
    # RLAM - check if DBB_DAEMON_PORT 8080 is up 
    # Bash can't run netstat, so it needs tsocmd 
    # gitlab-runner GREP ERROR: Job failed: exit status 1
    # Circumvent this issue ->  grep xxxx    xxxxx   && true=0 || false=1 
    # pipe it to a tmp file since return code is not reliable
    #tsocmd netstat | grep 8080 > $ZOS_TMP  && true=0 || false=1
    #  if [ -s $ZOS_TMP ]
    #  then
    #    DBB_DAEMON_OPTS="-DBB_DAEMON_HOST 127.0.0.1 -DBB_DAEMON_PORT 8080"
    #    echo "DBB Daemon is running at port 8080"
    #  else
    #    echo "DBB Daemon is NOT running at port 8080 - Skip using DBB Daemon"  
    #    exit rc=0
    #  fi      
    
    if [ "$RUN_ZUNIT_TEST" == "true" ]
    then
      DBB_ZUNIT_OPTS="-runzTests"
    fi    
    set +e
    set -o xtrace
    $DBB_HOME/bin/groovyz  $DBB_DAEMON_OPTS $JAVA_LOG4J\
      $PWD/../dbb-zappbuild/build.groovy\
      --application cics-genapp  \
      --logEncoding UTF-8 -w $PWD --sourceDir $PWD --workDir $WORKING_DIR\
      --hlq ${DBB_HLQ} --url $DBB_URL $DBB_CREDENTIAL_OPTIONS $DBB_BUILD_TYPE $DBB_EXTRA_OPTS $DBB_CCC_OPTS $DBB_ZUNIT_OPTS\
      #--cc -cch localhost -ccp 8008 -cco "e='CCPDF,CCSONARQUBE',o=${WORKING_DIR/$BUILD_OUTPUT_FOLDER}" 
    rc=$?
    #    cd  $WORKING_DIR/$BUILD_OUTPUT_FOLDER/build* don't know subdirectoty timestamp
    cd $WORKING_DIR/$BUILD_OUTPUT_FOLDER/build*
    ls -la
      if [ -s buildList.txt ]
      then
          echo "DBB Build Completed. buildList.txt has data RC=$?"
      else      
          echo "DBB Build Error. Empty buildList.txt RC=$?"
          exit 12
      fi  
      
    # Xalan is for zos-agent to convert, the other option is to use xsltproc (see Build Report)  
    #export LIBPATH=$LIBPATH:$XSLTPATH/lib:$XMLPATH/lib  
    #echo "LIBPATH -> $LIBPATH"
    #cd $CI_PROJECT_DIR/BUILD-$CI_PIPELINE_ID/build*
    #cd $WORKING_DIR/$BUILD_OUTPUT_FOLDER/build*
    #for f in `find . -name "*.zunit.report.log"`; 
    #   do
    #     $XSLTPATH/bin/Xalan -o $f.xml $f /var/dbb/extensions/zunit2junit/AZUZ2J30.xsl; 
    #   done;
    
    #set +o xtrace
    #cp $WORKING_DIR/*/*.log $REPORT_FOLDER
    #cp $WORKING_DIR/*/*.json $REPORT_FOLDER
    #cp $WORKING_DIR/*/*.html $REPORT_FOLDER
    #for file in $(find $WORKING_DIR -name "*.zunit.report.log")
    #do
    #  iconv -t IBM-1047 -f ISO8859-1 $file > $file.ibm1047.log
    #  chtag -r  $file.ibm1047.log
    #  grep -q "FINISHED EXgrepECUTION RC=04" $file.ibm1047.log
    #  if [ $? == 0 ]
    #  then
    #    rc=1
    #  fi
    #done 
    #if [ "$RUN_CODE_COVERAGE" == "true" ] && [ "$RUN_ZUNIT_TEST" == "true" ]
    #then
    #  echo "PWD -> $PWD"
    #  mv -f $HOME/CC/*.pdf $REPORT_FOLDER
    #  mv -f $HOME/CC/*.cczip $REPORT_FOLDER
    #  $CCC_INSTALL_FOLDER/bin/ccstop.sh $CCC_PORT >> $WORKING_DIR/ccc.log
    #fi
    #exit $rc
  tags:
    - OMVS2.5
    
# This stage on the z/OS perform IDz code review (optional)
IDz Code Review:
  stage: CodeReview
  dependencies: []  
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  only :
    variables:
      - $RUN_IDZ_CODE_REVIEW == 'true'
  script:
  - |
    # env
    rc=0
    BUILD_OUTPUT_FOLDER=$(ls $WORKING_DIR  | grep build | sort -u)
    set -o xtrace
    $DBB_HOME/bin/groovyz \
        $PWD/../dbb/Pipeline/RunIDZCodeReview/RunCodeReview.groovy\
        --workDir $WORKING_DIR/$BUILD_OUTPUT_FOLDER\
        -cr  $PWD/rlam-genapp/cr-rules/CodeReviewRules.dat\
        -ccr $PWD/rlam-genapp/cr-rules/CodeReviewRules.ccr
    rc=$?
    set +o xtrace
    if [ -f $WORKING_DIR/$BUILD_OUTPUT_FOLDER/CodeReviewJUNIT.xml ]
    then
        cp $WORKING_DIR/$BUILD_OUTPUT_FOLDER/CodeReviewJUNIT.xml $REPORT_FOLDER
    fi
    exit $rc
  tags:
    - OMVS2.5

# This stage on the gitlab-runner instance pull the logs
# and zUnit outputs from the z/OS and publish then
# back to the GitLab CI pipeline board (optional).
Build Report:
  stage: Report
  dependencies: []
  only :
    variables:
      - $GITLAB_REPORT_UPLOAD == 'true'    
  script:
  - | 
    echo "PWD -> $PWD"
    echo "USER - > $USER"
    echo " MKDIR -> build_$CI_PIPELINE_ID" 
    mkdir build_$CI_PIPELINE_ID
    cd build_$CI_PIPELINE_ID
    echo "Before sftp -> $ZOS_SFTP_PORT $ZOS_SFTP_USER@$ZOS_SFTP_HOST "
    sftp -o "StrictHostKeyChecking=no" -P $ZOS_SFTP_PORT $ZOS_SFTP_USER@$ZOS_SFTP_HOST<<EOF
    mget $REPORT_FOLDER/*
    EOF
    set +e
    set -o xtrace
    # xsltproc is ruuning at gitlab runner HOME; it will create *.zunit.report.log.xml file that can be used by JUNIT
    # files located at /home/gitlab-runner/builds/1TTmTXze/0/mvp/dbb-pipeline
    for file in $(find . -name "*.zunit.report.log")
    do
      xsltproc $CI_PROJECT_DIR/rlam-genapp/zUnit/xsl/AZUZ2J30.xsl $file > $(basename $file).xml
      grep -q "FINISHED EXECUTION RC=04" $(basename $file).xml
      _rc=$?
      echo "zUnit result for $file: $rc"
      if [ $_rc -eq 0 ] 
      then
        echo "zUnit failed for: $file!!!"
        rc=1
      fi
    done
    set -e
  artifacts:
    name: "report-${CI_PIPELINE_ID}"
    when: always
    paths:
      - "build_${CI_PIPELINE_ID}/"
    reports:
      junit: "build_$CI_PIPELINE_ID/*.xml"
  tags:
    - shell
    
# This stage on the z/OS build the UCD package/version
UCD Package:
  stage: Package
  dependencies: []  
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
  script:
  - |
    # env
    rc=0
    cat <<EOF >> $WORKING_DIR/artifactoy.properties
    Repository_type=artifactory
    username=$ARTI_USERNAME
    password=$ARTI_PASSWORD
    repository=$ARTI_REPO_PATH
    url=$ARTI_URL
    EOF
    
    BUILD_OUTPUT_FOLDER=$(ls $WORKING_DIR  | grep build | sort -u)
    set -o xtrace
    $DBB_HOME/bin/groovyz \
        $PWD/../dbb/Pipeline/CreateUCDComponentVersion/dbb-ucd-packaging.groovy\
      --buztool $UCD_BUZTOOL_PATH --component $UCD_COMPONENT\
      --workDir $WORKING_DIR/$BUILD_OUTPUT_FOLDER\
      -prop $ARTI_BUZTOOL\
      #UCD_PROCESS: "Ray_Deploy_App_Bind_CICS_UCD_Proc"  make sure comment out -prop for intenal UCD
      
    rc=$?
    set +o xtrace
    exit $rc
  tags:
    - OMVS2.5
    
# This stage on the z/OS deploy the UCD package/version
UCD Deploy:
  stage: Deploy
  dependencies: []  
  variables:
    GIT_STRATEGY: none
    GIT_CHECKOUT: "false"
    CI_DEBUG_TRACE: "false"  
  script:
  - |
    # env
    rc=0
    set -o xtrace    
   
    $DBB_HOME/bin/groovyz $JAVA_LOG4J\
        $PWD/../dbb/Pipeline/DeployUCDComponentVersion/ucd-deploy.groovy\
       -a "$UCD_APPPLICATION" -e "$UCD_ENV" -U $UCD_USERNAME -P $UCD_PASSWORD\
       -u $UCD_URL -d "$UCD_COMPONENT:latest" -p "$UCD_PROCESS" -k
    rc=$?
    set +o xtrace
    exit $rc
  tags:
    - OMVS2.5




        
